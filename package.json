{"name": "turoboz"
,"version": "1.7.0"
,"description": "Turoboz website"
,"babel": { "presets": [ "es2015" ] }
,"dependencies": {"autoprefixer-stylus": "latest"
                 ,"babel-cli": "^6.14.0"
                 ,"babel-core": "^6.14.0"
                 ,"babel-polyfill": "^6.13.0"
                 ,"babel-preset-es2015": "^6.14.0"
                 ,"concurrently": "^2.2.0"
                 ,"contentful": "^3.6.4"
                 ,"emoji-strip": "^0.0.3"
                 ,"jade": "latest"
                 ,"jade-babel": "^5.0.0"
                 ,"jade-cli": "latest"
                 ,"js-yaml": "^3.6.1"
                 ,"node-fetch":"^1.6.3"
                 ,"remove-markdown": "^0.1.0"
                 ,"request": "^2.75.0"
                 ,"stylus": "latest"
                 ,"uglify-js": "^2.7.3"
                 }
,"devDependencies":{ "browser-sync": "^2.14.0"
                  ,"contentful-management": "^1.1.14"
                  ,"standard": "^8.3.0"
                  ,"html-validator-cli": "^2.0.0"
                  ,"watch": "latest"
                  }
,"scripts": {"build": "concurrently 'npm run build:jade' 'npm run build:styles' 'npm run build:scripts'"
                ,"prebuild": "npm run fetch"
                ,"build:jade": "concurrently 'npm run build:jade:includes' 'npm run build:jade:layouts'"
                    ,"build:jade:layouts": "jade -o _layouts/ _jadefiles/layouts/*.jade"
                        ,"postbuild:jade:layouts": "echo 'layouts ready'"
                    ,"build:jade:includes": "jade -o _includes/ _jadefiles/includes/*.jade"
                        ,"postbuild:jade:includes": "echo 'includes ready'"
                ,"build:styles": "stylus -c -u autoprefixer-stylus -o css/site.css _styles/styles/site.styl"
                    ,"postbuild:styles": "echo 'styles ready'"
                ,"build:scripts": "npm run build:scripts:compile && npm run build:scripts:uglify"
                    ,"build:scripts:compile": "babel _scripts/es6 -d _scripts/js"
                        ,"postbuild:scripts:compile": "echo 'scripts ready'"
                    ,"build:scripts:uglify": "(cd _scripts/js && for file in *.js; do ( uglifyjs -c -m -o ../../js/$file $file); done)"
                        ,"postbuild:scripts:uglified": "echo 'scripts minimized'"
                ,"build:jekyll": "bundle exec jekyll build"
                ,"postbuild": "npm run build:jekyll"

            ,"watch": "concurrently 'npm run watch:jekyll' 'npm run watch:jade' 'npm run watch:styles' 'npm run watch:scripts' 'npm run watch:browser-sync'"
                ,"prewatch": "concurrently 'npm run build:jade' 'npm run build:styles' 'npm run watch:scripts:compile'"
                ,"watch:appcache": "sleep 5 && concurrently 'npm run watch:appcache:layouts' 'npm run watch:appcache:includes' 'npm run watch:appcache:css' 'npm run watch:appcache:js'"
                    ,"watch:appcache:update": "echo '' >> turoboz.appcache"
                    ,"watch:appcache:layouts": "watch 'npm run watch:appcache:update' _layouts"
                    ,"watch:appcache:includes": "watch 'npm run watch:appcache:update' _includes"
                    ,"watch:appcache:css": "watch 'npm run watch:appcache:update' css"
                    ,"watch:appcache:js": "watch 'npm run watch:appcache:update' js"
                ,"watch:jekyll": "bundle exec jekyll build --watch --incremental"
                ,"watch:jade": "concurrently 'npm run watch:jade:includes' 'npm run watch:jade:layouts'"
                    ,"watch:jade:layouts": "jade -o _layouts/ -w _jadefiles/layouts/*.jade"
                    ,"watch:jade:includes": "jade -o _includes/ -w _jadefiles/includes/*.jade"
                ,"watch:styles": "stylus -w -u autoprefixer-stylus -o css/site.css _styles/styles/site.styl"
                ,"watch:scripts": "watch 'npm run watch:scripts:compile' _scripts/es6 "
                    ,"prewatch:scripts": "npm run watch:scripts:compile"
                    ,"watch:scripts:compile": "babel _scripts/es6 -d js"
                ,"watch:browser-sync": "browser-sync start --server '_site' --port 3000 --files '_site/*/*' --no-open --no-notify"

            ,"fetch": "npm run fetch:contentful && npm run fetch:vk"
                ,"fetch:contentful": "npm run fetch:tours && npm run fetch:news && npm run fetch:testim"
                    ,"fetch:tours": "node fetch-contentful.js --tours"
                    ,"fetch:news": "node fetch-contentful.js --news"
                    ,"fetch:testim": "node fetch-contentful.js --testim"
                ,"fetch:vk": "node fetch-vk.js"

            ,"images": "concurrently 'npm run images:tours' 'npm run images:posts'"
                ,"images:posts": "POSTS_CHECKSUM_NOW=$(md5sum img/_posts/*.jpg | md5sum); POSTS_CHECKSUM_SAVED=$(cat img/_posts/.checksum); if [ \"$POSTS_CHECKSUM_NOW\" = \"$POSTS_CHECKSUM_SAVED\" ] ; then echo 'Posts images unchanged'; else npm run images:posts:generate ; fi"
                    ,"images:posts:generate": "concurrently 'npm run images:posts200px' 'npm run images:posts350px' 'npm run images:posts430px' 'npm run images:posts600px' 'npm run images:posts800px'"
                        ,"preimages:posts:generate": "rm img/posts{20,35,43,60,80}0/* || echo 'nothing to delete' "
                        ,"images:posts200px": "(cd img/_posts && for file in *.jpg; do (mogrify -path ../posts200 -filter Triangle -define filter:support=2 -resize 200x150^ -extent 200x150 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"images:posts350px": "(cd img/_posts && for file in *.jpg; do (mogrify -path ../posts350 -filter Triangle -define filter:support=2 -resize 350x263^ -extent 350x263 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"images:posts430px": "(cd img/_posts && for file in *.jpg; do (mogrify -path ../posts430 -filter Triangle -define filter:support=2 -resize 430x323^ -extent 430x323 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"images:posts600px": "(cd img/_posts && for file in *.jpg; do (mogrify -path ../posts600 -filter Triangle -define filter:support=2 -resize 600x450^ -extent 600x450 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"images:posts800px": "(cd img/_posts && for file in *.jpg; do (mogrify -path ../posts800 -filter Triangle -define filter:support=2 -resize 800x600^ -extent 800x600 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"postimages:posts:generate": "md5sum img/_posts/*.jpg | md5sum > img/_posts/.checksum && echo 'posts images ready'"
                ,"images:tours": "TOURS_CHECKSUM_NOW=$(md5sum img/_tours/*.jpg | md5sum); TOURS_CHECKSUM_SAVED=$(cat img/_tours/.checksum); if [ \"$TOURS_CHECKSUM_NOW\" = \"$TOURS_CHECKSUM_SAVED\" ] ; then echo 'Tours images unchanged'; else npm run images:tours:generate ; fi"
                    ,"images:tours:generate": "concurrently 'npm run images:tours300px' 'npm run images:tours400px' 'npm run images:tours600px' 'npm run images:tours800px'"
                        ,"preimages:tours:generate": "rm img/tours{3,4,6,8}00/* || echo 'nothing to delete'"
                        ,"images:tours300px": "(cd img/_tours && for file in *.jpg; do (mogrify -path ../tours300 -filter Triangle -define filter:support=2 -resize 300x225^ -extent 300x225 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"images:tours400px": "(cd img/_tours && for file in *.jpg; do (mogrify -path ../tours400 -filter Triangle -define filter:support=2 -resize 400x300^ -extent 400x300 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"images:tours600px": "(cd img/_tours && for file in *.jpg; do (mogrify -path ../tours600 -filter Triangle -define filter:support=2 -resize 600x450^ -extent 600x450 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"images:tours800px": "(cd img/_tours && for file in *.jpg; do (mogrify -path ../tours800 -filter Triangle -define filter:support=2 -resize 800x600^ -extent 800x600 -gravity Center -unsharp 0.25x0.08+8.3+0.045 -dither None -posterize 136 -quality 82 $file); done)"
                        ,"postimages:tours:generate": "md5sum img/_tours/*.jpg | md5sum > img/_tours/.checksum && echo 'tours images ready'"

            ,"deploy": "netlify deploy"
                ,"predeploy": "npm run build"

            ,"validate": "npm run -s validate:loop > _validation_report"
                ,"validate:loop": "for html in _site/{,/*,/*/*}/*.html; do echo $html; html-validator --file=$html; done"
            }
,"author": "none23"
,"license": "MIT"
,"repository": {"type": "git"
               ,"url": "git+https://github.com/none23/turoboz.git"
               }
}
